#+latex_header: \hypersetup{colorlinks=true,linkcolor=blue}
#+OPTIONS: tex:t
#+title: Dual Quaternions
#+author: Anthony Re

* Description

  Document containing notes on mathematical concepts pertaining to use of dual quaternions for game development.
Equations formatted via [[https://orgmode.org/manual/LaTeX-fragments.html][LaTeX fragments]]. Code snippets provided in C where applicable. Notes derived from
studying [[https://cs.gmu.edu/~jmlien/teaching/cs451/uploads/Main/dual-quaternion.pdf][a write-up]] by Ben Kenwright at Newcastle University.

* Introduction

  Quaternions and by extenion dual-quaternions are tools for expressing tranformations of rigid-bodies.
  Quaternions expand upon the complex number system, adding two additional complex components ~j~ and ~k~.
  Dual-Quaternions are combination of [[https://en.wikipedia.org/wiki/Dual_number][Dual Numbers]] and quaternions, allowing for translation and rotation
  to be performed.

** Advantages

Quaternions and Dual-Quaternions boast several advantages over more traditional Euler angles, axis angles,
and matrix transformations.

- Singularity Free (avoids Gimbal lock)
- Explicit
- Shortest-path interpolation
- Efficient and Compact
- Both translation and rotation expressed (with dual-quaternions)

* Dual Numbers

Dual numbers consist of a real and complex part.

** Definition

 \begin{equation*}
 z = r + d\epsilon
 \end{equation*}
 where:
 \begin{flalign*}
 r &= \textrm{ real component }&&\\
 d &= \textrm{ dual part }&&\\
 \epsilon &= \textrm{ dual operator }
 \end{flalign*}
 and:
 \begin{flalign*}
 &\epsilon \neq 0&&\\
 &\epsilon^2 = 0&&
 \end{flalign*}

** Addition

\begin{equation*}
(r_{A} + d_{A}\epsilon) + (r_{B} + d_{B}\epsilon) = (r_{A} + r_{B}) + (d_{A} + d_{B})\epsilon
\end{equation*}

** Multiplication

 \begin{equation*}
 (r_{A} + d_{A}\epsilon)(r_{B} + d_{B}\epsilon) = r_{A}r_{B} + (r_{B}d_{B} + r_{B}d_{A})\epsilon
 \end{equation*}

** Division

 \begin{equation*}
 \frac{(r_{A} + d_{A}\epsilon)}{(r_{B} + d_{B}\epsilon)} = \frac {r_{A}r_{B}}{r^2_{B}} + \frac{r_{B}d_{A} - r_{A}d_{B}}{r^2_{B}}
 \end{equation*}

** TODO Differentiation

* Quaternions

 Quaternions extend the complex number system with quaternion units ~i~, ~j~, and ~k~. They alleviate many of the issues of using Euler angles, axis-angles, and matrices to
 perform rotations in computer graphics. Often a quaternion is denoted by a scalar ~w~ and vector ~v~ components: ~(w, v)~.

** Definition

 \begin{equation*}
 q = w + xi +yj + zk
 \end{equation*}
 where:
 \begin{flalign*}
 i^2 = j^2 = k^2 = -1&&
 \end{flalign*}
 and:
 \begin{flalign*}
 ij &= k,\ ji = -k&&\\
 jk &= i,\ kj = -i&&\\
 ki &= j,\ ik = -j&&
 \end{flalign*}

*** Example Implementation

Quaternion data structure

#+BEGIN_SRC C
struct Quaternion {
  float x;
  float y;
  float z;
  float w;
} Quaternion;
#+END_SRC

** Scaling

\begin{equation*}
sq = (sw, sv)
\end{equation*}

** Addition

\begin{equation*}
q_{1} + q_{2} = (w_{1} + w_{2}, v_{1} + v_{2})
\end{equation*}

** Multiplication

\begin{equation*}
q_{1}q_{2} = (w_{1}w_{2} - v_{1} \cdot v_{2}, w_{1}v_{2} + w_{2}v_{1} + (v_{1} \times v_{2}))
\end{equation*}

where \cdot is the ~dot product~ and \times is the ~cross product~.

** Conjugate

\begin{equation*}
q' = (w, -v)
\end{equation*}

** Magnitude

\begin{equation*}
||q|| = qq'
\end{equation*}

** Axis Angle

   For unit quaternion $||q|| = 1$, axis angle rotation can be represented as

\begin{equation*}
q = (cos(\frac{\theta}{2}), n*sin(\frac{\theta}{2}))
\end{equation*}

*** Example Implementation

    Axis-angle to quaternion conversion

#+BEGIN_SRC C
Quaternion AxisAngle_To_Quaterion(Quaternion v, float angle) {
  return (Quaternion) {
    .x = v.x * sin(angle * 0.5f),
    .y = v.y * sin(angle * 0.5f),
    .z = v.z * sin(angle * 0.5f),
    .w = cos(angle * 0.5f)
  };
}
#+END_SRC

** TODO Quaternion Interpolation

* Dual Quaternions

  Quaterions combined with Dual Number theory allowing for compact representation of rotation /and/ translation.
  Consists of two quaternions for a total of eight elements.

** Definition

\begin{equation*}
q = q_{r} + q_{d}\epsilon
\end{equation*}

*** Example Implementation

The following contructs a dual-quaternion from a rotation quaternion ~q~ and a translation vector ~t~:

#+BEGIN_SRC C
struct Quaternion {
  float x;
  float y;
  float z;
  float w;
};

struct DualQuaternion {
  Quaternion real;
  Quaternion dual;
};

// Omitted for brevity
Quaternion Scale(Quaternion q);
Quaternion Normalize(Quaternion q);
Quaternion Multiply(Quaternion q1, Quaternion q2);

DualQuaternion DualQuaternion_From_Translation(Quaternion r, Vector t) {
  Quaternion real = Normalize(r);

  // .dual = (Quaternion(t, 0) * Real) * 0.5f
  return (DualQuaternion) {
    .real = real,
    .dual = Scale(Multiply((Quaternion){t.x, t.y, t.z, 0}, real), 0.5f)
  };
}
#+END_SRC

** Scaling

\begin{equation*}
sq = sq_{r} + sq_{d}\epsilon
\end{equation*}

** Addition

\begin{equation*}
q_{1} + q_{2} = q_{r1} + q_{r2} + (q_{d1} + q_{d2})\epsilon
\end{equation*}

** Multiplication

\begin{equation*}
q_{1} + q_{2} = q_{r1}q_{r2} + (q_{r1}q_{d2} + q_{d1}q_{r2})\epsilon
\end{equation*}

** Conjugate

\begin{equation*}
q' = q'_{r} + q'_{d}\epsilon
\end{equation*}

** Magnitude

\begin{equation*}
||q|| = qq'
\end{equation*}

** Unit

\begin{equation*}
||q|| = 1
\end{equation*}
given:
\begin{flalign*}
q'_{r}q_{d} + q'_{d}q_{r} = 0&&
\end{flalign*}

** Rotation and Translation

   The rigid rotational and translational representations (for unit dual-quaternion) are given by:

\begin{flalign*}
q_{r} &= r\\
q_{d} &= \frac{1}{2}tr
\end{flalign*}

where r and t represent the unit quaterions describing roation and translation, respectively.

*** Pure Rotation

    Pure rotations are represented by zeroing out the *dual* quaternion:

\begin{equation*}
q = [cos(\frac{\theta}{2}), x*sin(\frac{\theta}{2}), y*sin(\frac{\theta}{2}), z*sin(\frac{\theta}{2})][0, 0, 0, 0]
\end{equation*}

*** Pure Translation

    Conversely, Setting the *real* quaternion to the identity forms a pure translation:

\begin{equation*}
q = [1, 0, 0, 0][0, \frac{x}{2}, \frac{y}{2}, \frac{z}{2}]
\end{equation*}

where ~x~, ~y~, and ~z~ are components of quaternion ~t~

*** Combining Operations

    Quaternion transforms can be combined *non-commutatively* by the following:

\begin{equation*}
q = q_{t} \times q_{r}
\end{equation*}

Note that operations are applied from *right* to *left*, as with matrices.

*** Transforming a Point

    A unit dual-quaternion applies a transformation to a point via the following:

\begin{equation*}
p' = qpq'
\end{equation*}

where ~q~ represents a unit quaternion whose conjugate is ~q'~ and ~p~ and ~p'~ represent
an initial point and its resulting transform, respectively.

**** Example Transformation Function

     While ordinarily a transformation is given by $p' = qpq'$ by ordinary quaternion multiplication
     (with $p_{w} = 0$), a more efficient approach can be realized using the cross product:

\begin{equation*}
  p + q_{w} * 2(q \times p) * (q \times (q \times p))
\end{equation*}

where: $p$ is the vector target of the transform and $q$ is the product of dual-quaternions.
