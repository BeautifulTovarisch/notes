#+latex_header: \hypersetup{colorlinks=true,linkcolor=blue}
#+title: Dual Quaternions
#+author: Anthony Re
#+date: 2020-12-07
#+OPTIONS: tex:t

* Description

  Document containing notes on mathematical concepts pertaining to dual quaternions for game development.
Equations formatted via [[https://orgmode.org/manual/LaTeX-fragments.html][LaTeX fragments]]. Code snippets provided in C where applicable. Notes derived from
studying [[https://cs.gmu.edu/~jmlien/teaching/cs451/uploads/Main/dual-quaternion.pdf][a write-up]] by Ben Kenwright at Newcastle University

* Introduction

  Quaternions and by extenion dual-quaternions are tools for expressing tranformations of rigid-bodies.
  Quaternions expand upon the complex number system, adding two additional complex components ~j~ and ~k~.
  Dual-Quaternions are combination of [[https://en.wikipedia.org/wiki/Dual_number][Dual Numbers]] and quaternions, allowing for translation and rotation
  to be performed.

** Advantages

Quaternions and Dual-Quaternions boast several advantages over more traditional Euler angles, axis angles,
and matrix transformations.

- Singularity Free (avoids Gimbal lock)
- Explicit
- Shortest-path interpolation
- Efficient and Compact
- Both translation and rotation expressed (with dual-quaternions)

* Dual Numbers

Dual numbers consist of a real and complex part.

** Definition

 \begin{equation*}
 z = r + d\epsilon
 \end{equation*}
 where:
 \begin{flalign*}
 r &= \textrm{ real component }&&\\
 d &= \textrm{ dual part }&&\\
 \epsilon &= \textrm{ dual operator }
 \end{flalign*}
 and:
 \begin{flalign*}
 &\epsilon^2 &= 0&&\\
 &\epsilon &\neq 0
 \end{flalign*}

** Addition

\begin{equation*}
(r_{A} + d_{A}\epsilon) + (r_{B} + d_{B}\epsilon) = (r_{A} + r_{B}) + (d_{A} + d_{B})\epsilon
\end{equation*}

 ** Multiplication

 \begin{equation*}
 (r_{A} + d_{A}\epsilon)(r_{B} + d_{B}\epsilon) = r_{A}r_{B} + (r_{B}d_{B} + r_{B}d_{A})\epsilon
 \end{equation*}

 ** Division

 \begin{equation*}
 \frac{(r_{A} + d_{A}\epsilon)}{(r_{B} + d_{B}\epsilon)} = \frac {r_{A}r_{B}}{r^2_{B}} + \frac{r_{B}d_{A} - r_{A}d_{B}}{r^2_{B}}
 \end{equation*}

 ** TODO Differentiation

* Quaternions

 Quaternions extend the complex number system with quaternion units ~i~, ~j~, and ~k~. They alleviate many of the issues of using Euler angles, axis-angles, and matrices to
 perform rotations in computer graphics. Often a quaternion is denoted by a scalar ~w~ and vector ~v~ components: ~(w, v)~.

** Definition

 \begin{equation*}
 q = w + xi +yj + zk
 \end{equation*}
 where:
 \begin{flalign*}
 i^2 = j^2 = k^2 = -1&&
 \end{flalign*}
 and:
 \begin{flalign*}
 ij &= k,\ ji = -k&&\\
 jk &= i,\ kj = -i&&\\
 ki &= j,\ ik = -j&&
 \end{flalign*}

*** Example Implementation

Quaternion data structure

#+BEGIN_SRC C
typedef struct Quaternion {
  float x;
  float y;
  float z;
  float w;
} Quaternion;

#+END_SRC

** Scaling
\begin{equation*}
sq = (sw, sv)
\begin{equation*}

** Addition

\begin{equation*}
q_{1} + q_{2} = (w_{1} + w_{2}, v_{1} + v_{2})
\end{equation*}

** Multiplication

\begin{equation*}
q_{1}q_{2} = (w_{1}w_{2} - v_{1}v_{2}, w_{1}v_{2} + w_{2}v_{1} + (v_{1} \times v_{2}))
\end{equation*}

** Conjugate

\begin{equation*}
q' = (w, -v)
\end{equation*}

** Magnitude

\begin{equation*}
||q|| = qq'
\end{equation*}

** Axis Angle
   For unit quaternion $||q|| = 1$, axis angle rotation can be represented as

\begin{equation*}
q = (cos(\frac{\theta}{2}), nsin(\frac{\theta}{2}))
\end{equation*}

*** Example Implementation

    Axis-angle to quaternion conversion

#+BEGIN_SRC C
Quaternion AxisAngle_To_Quaterion(Quaternion v, float angle) {
  return (Quaternion) {
    .x = v.x * sin(angle * 0.5f),
    .y = v.y * sin(angle * 0.5f),
    .z = v.z * sin(angle * 0.5f),
    .w = cos(angle * 0.5f)
  };
}
#+END_SRC

** TODO Quaternion Interpolation

* Dual Quaternions
